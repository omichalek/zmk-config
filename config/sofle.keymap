/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

// I am using localized keymap,
// comes from github.com/joelspadin/zmk-locale-generator v1.3.2
#include "keys_cs.h"

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
// #include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

// All the ZMK_* commands below utilize zmk-nodefree-config:
#define HOST_OS 1  // set to 1 for Linux, default is 0 (Windows)
#include "zmk-helpers/helper.h"
// positional key names for Sofle:
//#include "../zmk-nodefree-config/keypos_def/keypos_60keys.h"
#include "zmk-helpers/key-labels/sofle.h"

#define BASE 0
#define NAV 1
#define NUM 2
#define MIR 3
#define SYS 4

// layer ALIASES for diacritics, maybe symbols, maybe half mirroring
#define LYA 5
#define LYE 6
#define LYI 7
#define LYO 8
#define LYU 9
#define LYY 10

#define LYC 11
#define LYD 12
#define LYL 13
#define LYN 14
#define LYR 15
#define LYS 16
#define LYT 17
#define LYZ 18

// #define ALFA (LH1)


// ///   EC11 Encoders   /// //
&sensors {
  triggers-per-rotation = <30>;
};



// ///   CUSTOM   /// //

/ {
  behaviors {
        hht: hold_tap_hold-pref {
            compatible = "zmk,behavior-hold-tap";
            hold-while-undecided;
            #binding-cells = <2>;
            tapping-term-ms = <100>;      // 150
            quick-tap-ms = <0>;
            flavor = "hold-preferred";    // hh
            bindings = <&kp>, <&kp>;      // HOLD TAP
        };
    
        htt: hold_tap_tap-pref {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";   // tt
            bindings = <&kp>, <&kp>;    // HOLD TAP
        };

        //  CUSTOM F-KEYS using TAP DANCE  //  UNUSED    
        my_f1: tap_dance_f1 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <155>;
            bindings = <&hht F1 ESC>, <&kp LC(F1)>;
        };
  };
};


// /    CUSTOM KEYS    / //
// ?!
ZMK_MOD_MORPH(my_qmem, bindings = <&kp CS_QMARK>, <&kp CS_EXCL>; mods = <(MOD_LSFT|MOD_RSFT)>;)
// ,;
ZMK_MOD_MORPH(my_cose, bindings = <&kp CS_COMMA>, <&kp CS_SEMICOLON>; mods = <(MOD_LSFT|MOD_RSFT)>;)
//.,    for a numpad maybe
ZMK_MOD_MORPH(my_doco, bindings = <&kp CS_PERIOD>, <&kp CS_COMMA>; mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(my_rm,   bindings = <&kp BSPC>, <&kp DEL>; mods = <(MOD_LSFT|MOD_RSFT)>;)
ZMK_MOD_MORPH(my_quo,  bindings = <&kp CS_DOUBLE_QUOTES>, <&kp CS_SINGLE_QUOTE>; mods = <(MOD_LSFT|MOD_RSFT)>;)



// /  CUSTOM diacritics, shifted variants work as follows:
//     1. macro for lower case   2. macro for upper case   3. mod morph to combine them

//   á
ZMK_MACRO(my_aau,    bindings = <&kp CS_ACUTE &kp LS(A)>;)
ZMK_MOD_MORPH(my_aa, bindings = <&kp CS_A_ACUTE>, <&my_aau>; mods = <(MOD_LSFT|MOD_RSFT)>;)
//
ZMK_MACRO(my_aull,    bindings = <&kp CS_UMLAUT &kp A>;)
ZMK_MACRO(my_aulu,    bindings = <&kp CS_UMLAUT &kp LS(A)>;)
ZMK_MOD_MORPH(my_aul, bindings = <&my_aull>, <&my_aulu>; mods = <(MOD_LSFT|MOD_RSFT)>;)

//   é
ZMK_MACRO(my_eeu,    bindings = <&kp CS_ACUTE &kp LS(E)>;)
ZMK_MOD_MORPH(my_ee, bindings = <&kp CS_E_ACUTE>, <&my_eeu>; mods = <(MOD_LSFT|MOD_RSFT)>;)
//
ZMK_MACRO(my_ijeu,    bindings = <&kp CS_CARON &kp LS(E)>;)
ZMK_MOD_MORPH(my_ije, bindings = <&kp CS_E_CARON>, <&my_ijeu>; mods = <(MOD_LSFT|MOD_RSFT)>;)

//   í
ZMK_MACRO(my_iiu,    bindings = <&kp CS_ACUTE &kp LS(I)>;)
ZMK_MOD_MORPH(my_ii, bindings = <&kp CS_I_ACUTE>, <&my_iiu>; mods = <(MOD_LSFT|MOD_RSFT)>;)

//   ó
ZMK_MACRO(my_ool,    bindings = <&kp CS_ACUTE &kp O>;)
ZMK_MACRO(my_oou,    bindings = <&kp CS_ACUTE &kp LS(O)>;)
ZMK_MOD_MORPH(my_oo, bindings = <&my_ool>, <&my_oou>; mods = <(MOD_LSFT|MOD_RSFT)>;)
//   Ô ô   CS_CARET
ZMK_MACRO(my_ocl,    bindings = <&kp CS_CARET &kp O>;)
ZMK_MACRO(my_ocu,    bindings = <&kp CS_CARET &kp LS(O)>;)
ZMK_MOD_MORPH(my_oc, bindings = <&my_ocl>, <&my_ocu>; mods = <(MOD_LSFT|MOD_RSFT)>;)
//   
ZMK_MACRO(my_oull,    bindings = <&kp CS_UMLAUT &kp O>;)
ZMK_MACRO(my_oulu,    bindings = <&kp CS_UMLAUT &kp LS(O)>;)
ZMK_MOD_MORPH(my_oul, bindings = <&my_oull>, <&my_oulu>; mods = <(MOD_LSFT|MOD_RSFT)>;)

//   ú
ZMK_MACRO(my_uuu,    bindings = <&kp CS_ACUTE &kp LS(U)>;)
ZMK_MOD_MORPH(my_uu, bindings = <&kp CS_U_ACUTE>, <&my_uuu>; mods = <(MOD_LSFT|MOD_RSFT)>;)
//
ZMK_MACRO(my_uou,    bindings = <&kp CAPS &kp CS_U_RING &kp CAPS>;)
ZMK_MOD_MORPH(my_uo, bindings = <&kp CS_U_RING>, <&my_uou>; mods = <(MOD_LSFT|MOD_RSFT)>;)
//
ZMK_MACRO(my_uull,    bindings = <&kp CS_UMLAUT &kp U>;)
ZMK_MACRO(my_uulu,    bindings = <&kp CS_UMLAUT &kp LS(U)>;)
ZMK_MOD_MORPH(my_uul, bindings = <&my_uull>, <&my_uulu>; mods = <(MOD_LSFT|MOD_RSFT)>;)

//   ý
ZMK_MACRO(my_yyu,    bindings = <&kp CS_ACUTE &kp LS(CS_Y)>;)
ZMK_MOD_MORPH(my_yy, bindings = <&kp CS_Y_ACUTE>, <&my_yyu>; mods = <(MOD_LSFT|MOD_RSFT)>;)



//   č
ZMK_MACRO(my_chu,    bindings = <&kp CS_CARON &kp LS(C)>;)
ZMK_MOD_MORPH(my_ch, bindings = <&kp CS_C_CARON>, <&my_chu>; mods = <(MOD_LSFT|MOD_RSFT)>;)
//   Ç ç   CS_CEDILLA
ZMK_MACRO(my_ccl,    bindings = <&kp CS_CEDILLA &kp C>;)
ZMK_MACRO(my_ccu,    bindings = <&kp CS_CEDILLA &kp LS(C)>;)
ZMK_MOD_MORPH(my_cc, bindings = <&my_ccl>, <&my_ccu>; mods = <(MOD_LSFT|MOD_RSFT)>;)

//   ď
ZMK_MACRO(my_dhl,    bindings = <&kp CS_CARON &kp D>;)
ZMK_MACRO(my_dhu,    bindings = <&kp CS_CARON &kp LS(D)>;)
ZMK_MOD_MORPH(my_dh, bindings = <&my_dhl>, <&my_dhu>; mods = <(MOD_LSFT|MOD_RSFT)>;)

//   ľ
ZMK_MACRO(my_lhl,    bindings = <&kp CS_CARON &kp L>;)
ZMK_MACRO(my_lhu,    bindings = <&kp CS_CARON &kp LS(L)>;)
ZMK_MOD_MORPH(my_lh, bindings = <&my_lhl>, <&my_lhu>; mods = <(MOD_LSFT|MOD_RSFT)>;)

//   Ĺ ĺ
ZMK_MACRO(my_lll,    bindings = <&kp CS_ACUTE &kp L>;)
ZMK_MACRO(my_llu,    bindings = <&kp CS_ACUTE &kp LS(L)>;)
ZMK_MOD_MORPH(my_ll, bindings = <&my_lll>, <&my_llu>; mods = <(MOD_LSFT|MOD_RSFT)>;)

//   ň
ZMK_MACRO(my_nhl,    bindings = <&kp CS_CARON &kp N>;)
ZMK_MACRO(my_nhu,    bindings = <&kp CS_CARON &kp LS(N)>;)
ZMK_MOD_MORPH(my_nh, bindings = <&my_nhl>, <&my_nhu>; mods = <(MOD_LSFT|MOD_RSFT)>;)
//   
ZMK_MACRO(my_ntl,    bindings = <&kp CS_TILDE &kp N>;)
ZMK_MACRO(my_ntu,    bindings = <&kp CS_TILDE &kp LS(N)>;)
ZMK_MOD_MORPH(my_nt, bindings = <&my_ntl>, <&my_ntu>; mods = <(MOD_LSFT|MOD_RSFT)>;)

//   ř
ZMK_MACRO(my_rhu,    bindings = <&kp CS_CARON &kp LS(R)>;)
ZMK_MOD_MORPH(my_rh, bindings = <&kp CS_R_CARON>, <&my_rhu>; mods = <(MOD_LSFT|MOD_RSFT)>;)
//   Ŕ ŕ
ZMK_MACRO(my_rrl,    bindings = <&kp CS_ACUTE &kp R>;)
ZMK_MACRO(my_rru,    bindings = <&kp CS_ACUTE &kp LS(R)>;)
ZMK_MOD_MORPH(my_rr, bindings = <&my_rrl>, <&my_rru>; mods = <(MOD_LSFT|MOD_RSFT)>;)

//   š
ZMK_MACRO(my_shu,    bindings = <&kp CS_CARON &kp LS(S)>;)
ZMK_MOD_MORPH(my_sh, bindings = <&kp CS_S_CARON>, <&my_shu>; mods = <(MOD_LSFT|MOD_RSFT)>;)
//   CS_ESZETT   CS_SZ

//   ť
ZMK_MACRO(my_thl,    bindings = <&kp CS_CARON &kp T>;)
ZMK_MACRO(my_thu,    bindings = <&kp CS_CARON &kp LS(T)>;)
ZMK_MOD_MORPH(my_th, bindings = <&my_thl>, <&my_thu>; mods = <(MOD_LSFT|MOD_RSFT)>;)

//   ž
ZMK_MACRO(my_zhu,    bindings = <&kp CS_CARON &kp LS(CS_Z)>;)
ZMK_MOD_MORPH(my_zh, bindings = <&kp CS_Z_CARON>, <&my_zhu>; mods = <(MOD_LSFT|MOD_RSFT)>;)


// /   CUSTOM: UNICODE     normal            shifted
// quotation marks
ZMK_UNICODE_PAIR(uc_lo99,   N2, N0, N1, E,    N2, N0, N1, A)      // „ / ‚
ZMK_UNICODE_PAIR(uc_hi66,   N2, N0, N1, C,    N2, N0, N1, N8)     // “ / ‘
ZMK_UNICODE_PAIR(uc_hi99,   N2, N0, N1, D,    N2, N0, N1, N9)     // ” / ’



// ///   LAYERS   /// //

// Activate ADJUST layer by pressing
ZMK_CONDITIONAL_LAYER(lyr_sys, NAV MIR, SYS)



ZMK_LAYER(base,
//
&htt F1 ESC &kp F2    &kp F3  &kp F4  &kp F5   &kp F6                             &kp PSCRN  &kp HOME  &kp C_PP   &kp END   &kp F11     &kp C_AL_CALC
&kp TAB      &kp Q      &kp W   &kp F   &kp P    &kp G                             &kp J   &lt LYL L  &lt LYU U  &lt LYY CS_Y  &kp CS_MINUS  &my_rm
&kp LSHFT     &lt LYA A  &lt LYR R  &lt LYS S  &lt LYT T  &lt LYD D                 &kp H  &lt LYN N  &lt LYE E  &lt LYI I     &lt LYO O    &kp LCTRL
&lt MIR SPACE  &lt LYZ CS_Z &kp X &lt LYC C  &kp V   &kp B  &kp C_MUTE    &kp C_MUTE  &my_qmem  &kp M     &kp K      &my_cose  &kp CS_DOT  &lt MIR RET
          &kp LGUI  &kp LALT &mo NUM  &mo NAV  &hht LCTRL RET    &hht RSHFT SPACE &mo NUM   &mo NAV   &kp RALT   &kp LGUI,
&inc_dec_kp RIGHT LEFT &inc_dec_kp C_VOL_UP C_VOL_DN
)


ZMK_LAYER(nav-num,
//
&kp F7    &kp F8    &kp F9    &kp F10   &kp F11   &kp F12                       &kp F7          &kp F8     &kp F9     &kp F10    &kp F11       &kp F12
&trans    &kp ESC   &kp BSPC  &kp UP    &kp DEL   &kp PG_UP                     &kp KP_MULTIPLY &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS  &trans
&trans    &kp HOME  &kp LEFT  &kp DOWN  &kp RIGHT &kp END                       &kp KP_DIVIDE   &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS  &trans
&trans    &kp CS_TILDE  &kp TAB   &kp SPACE &kp ENTER &kp PG_DN    &trans   &trans  &kp KP_N0       &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp CS_EQUAL  &trans
                    &trans    &trans    &kp LALT   &trans     &trans     &trans  &trans         &kp KP_N0   &trans    &trans, 
&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN
)


ZMK_LAYER(num-nav,
//
&kp GRAVE  &kp N1          &kp N2     &kp N3     &kp N4     &kp N5                             &kp N6     &kp N7    &kp N8    &kp N9    &kp N0     &kp CS_ACUTE
&trans     &kp KP_MULTIPLY &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS                       &kp ESC    &kp BSPC  &kp UP    &kp DEL   &kp PG_UP  &trans
&trans     &kp KP_DIVIDE   &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp CS_PLUS                        &kp HOME   &kp LEFT  &kp DOWN  &kp RIGHT &kp END    &trans
&trans     &kp KP_N0       &kp KP_N1  &kp KP_N2  &kp KP_N3  &my_doco    &kp C_BKLT_TOG &trans  &kp NUBS   &kp ENTER &kp SPACE &kp TAB   &kp PG_DN  &trans
                           &trans     &trans     &trans     &kp LALT       &trans         &trans  &trans    &trans    &trans    &trans,
&inc_dec_kp C_BRIGHTNESS_INC C_BRIGHTNESS_DEC &inc_dec_kp PG_UP PG_DN
)


ZMK_LAYER(mirror,
//
&trans  &trans    &trans   &trans   &trans    &trans                       &trans    &trans  &trans   &trans   &trans   &trans
&trans  &kp J     &kp L    &lt LYU U  &lt LYY CS_Y  &kp CS_MINUS                &kp Q     &kp W   &kp F    &kp P    &kp G    &trans
&trans  &kp H   &lt LYN N  &lt LYE E  &lt LYI I  &lt LYO O                 &kp A     &kp R   &kp S    &kp T    &kp D    &trans
&trans  &my_qmem  &kp M    &kp K    &my_cose  &kp CS_DOT  &trans   &trans  &kp CS_Z  &kp X   &kp C    &kp V    &kp B    &trans
                  &trans   &trans   &trans    &trans      &trans   &trans  &trans    &trans  &trans   &trans,
&inc_dec_kp DOWN UP &inc_dec_kp C_VOL_UP C_VOL_DN
)


ZMK_LAYER(sys,
//
&bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_CLR                  &trans    &trans    &trans   &trans    &trans  &trans
&trans     &kp INS      &kp PSCRN    &kp K_CMENU  &trans       &trans                        &kp PG_UP &trans    &kp UP   &trans    &kp N0  &trans
&trans     &kp LALT     &kp LCTRL    &kp LSHFT    &trans       &kp CLCK                      &kp PG_DN &kp LEFT  &kp DOWN &kp RIGHT &kp DEL &kp BSPC
&trans     &kp K_UNDO   &kp K_CUT    &kp K_COPY   &kp K_PASTE  &trans        &trans  &trans  &trans    &trans    &trans   &trans    &trans  &trans
                        &trans       &trans       &trans       &trans        &trans  &trans  &trans    &trans    &trans   &trans,
&inc_dec_kp &trans &trans &inc_dec_kp &trans &trans
)



// ///   EXTRA LAYERS for DIACRITICS, SYMBOLS etc.   /// //

ZMK_LAYER(a,
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans &trans      &trans &trans &trans &trans &trans &trans &trans
        &trans &kp H  &my_aul  &my_aa  &kp CS_AT      &kp CS_AT  &my_aa  &my_aul &trans &trans,
&inc_dec_kp &trans &trans    &inc_dec_kp &trans &trans
)

ZMK_LAYER(e,
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans &trans      &trans &trans &trans &trans &trans &trans &trans
&kp CS_EURO  &trans  &kp CS_AMPS  &my_ee  &my_ije    &my_ije  &my_ee  &kp CS_AMPS  &kp S  &kp CS_EURO,      
&inc_dec_kp &trans &trans    &inc_dec_kp &trans &trans 
)

ZMK_LAYER(i,
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans &trans      &trans &trans &trans &trans &trans &trans &trans
           &trans  &trans  &trans  &my_ii &trans      &trans  &my_ii  &trans  &trans  &trans,
&inc_dec_kp &trans &trans    &inc_dec_kp &trans &trans
)

ZMK_LAYER(o,
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans &trans      &trans &trans &trans &trans &trans &trans &trans
         &trans  &trans  &my_oul  &my_oo  &my_oc      &my_oc  &my_oo  &my_oul &trans  &trans,
&inc_dec_kp &trans &trans    &inc_dec_kp &trans &trans
)

ZMK_LAYER(u,
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans &trans      &trans &trans &trans &trans &trans &trans &trans
         &trans  &trans  &my_uul  &my_uu  &my_uo      &my_uo  &my_uu  &my_uul  &trans  &trans,
&inc_dec_kp &trans &trans    &inc_dec_kp &trans &trans
)

ZMK_LAYER(y,
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans &trans      &trans &trans &trans &trans &trans &trans &trans
          &trans  &trans  &trans  &my_yy  &trans      &trans  &my_yy  &trans  &trans  &trans,
&inc_dec_kp &trans &trans    &inc_dec_kp &trans &trans
)

// ///   EXTRA LAYERS for DIACRITICS, LETTER VARIANTS, SYMBOLS etc.   /// //

ZMK_LAYER(c,
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans &trans      &trans &trans &trans &trans &trans &trans &trans
       &trans  &kp K  &my_cc  &kp CS_AMPS  &my_ch    &my_ch  &kp CS_AMPS  &my_cc  &trans  &trans,
&inc_dec_kp &trans &trans    &inc_dec_kp &trans &trans
)

ZMK_LAYER(d,
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans &trans      &trans &trans &trans &trans &trans &trans &trans
           &trans  &kp O  &trans  &trans  &my_dh      &my_dh  &trans  &trans  &trans  &trans,
&inc_dec_kp &trans &trans    &inc_dec_kp &trans &trans
)

ZMK_LAYER(l,
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans &trans      &trans &trans &trans &trans &trans &trans &trans
          &trans  &trans  &trans  &my_ll  &my_lh      &my_lh  &my_ll  &trans  &kp W  &trans,
&inc_dec_kp &trans &trans    &inc_dec_kp &trans &trans
)

ZMK_LAYER(n,
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans &trans      &trans &trans &trans &trans &trans &trans &trans
          &trans  &trans  &my_nt  &trans  &my_nh      &my_nh  &trans  &my_nt  &kp R  &trans,
&inc_dec_kp &trans &trans    &inc_dec_kp &trans &trans
)

ZMK_LAYER(r,
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans &trans      &trans &trans &trans &trans &trans &trans &trans
           &trans  &kp N  &trans  &my_rr  &my_rh      &my_rh  &my_rr  &trans  &trans  &trans,
&inc_dec_kp &trans &trans    &inc_dec_kp &trans &trans
)

ZMK_LAYER(s,
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans &trans      &trans &trans &trans &trans &trans &trans &trans
   &trans  &kp E  &kp CS_SZ  &kp CS_DLLR  &my_sh      &my_sh  &kp CS_DLLR  &kp CS_SZ  &trans  &trans,
&inc_dec_kp &trans &trans    &inc_dec_kp &trans &trans
)

ZMK_LAYER(t,
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans &trans      &trans &trans &trans &trans &trans &trans &trans
      &trans  &kp I  &trans  &kp CS_AMPS  &my_th      &my_th  &kp CS_AMPS  &trans  &trans  &trans,
&inc_dec_kp &trans &trans    &inc_dec_kp &trans &trans
)

ZMK_LAYER(z,
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans                    &trans &trans &trans &trans &trans &trans
&trans &trans &trans &trans &trans &trans &trans      &trans &trans &trans &trans &trans &trans &trans
          &trans  &trans  &trans  &trans  &my_zh      &my_zh  &trans  &trans  &trans  &trans,
&inc_dec_kp &trans &trans    &inc_dec_kp &trans &trans
)



// ///   CUSTOM COMBOS   /// //


// DIACRITICS, LEFT
//ZMK_COMBO(cs-aa, &kp CS_A_ACUTE, LM4 LH1, 0, 100)
//ZMK_COMBO(cs-rh, &kp CS_R_CARON, LM3 LH1, 0, 100)
//ZMK_COMBO(cs-sh, &kp CS_S_CARON, LM2 LH1, 0, 100)
//ZMK_COMBO(cs-tt, &kp ???, LM1 LH1, 0 3, 100)
//ZMK_COMBO(cs-dd, &kp ???, LM0 LH1, 0 3, 100)
 
//ZMK_COMBO(cs-zh, &kp CS_Z_CARON, LB4 LH1, 0, 100)
//ZMK_COMBO(cs-ch, &kp CS_C_CARON, LB2 LH1, 0, 100)

// DIACRITICS, RIGHT
//ZMK_COMBO(cs-uu, &kp CS_U_ACUTE, RT2 RH1, 0, 100)
//ZMK_COMBO(cs-uo, &kp CS_U_RING , RT2 RH0, 0, 100)
//ZMK_COMBO(cs-yy, &kp CS_Y_ACUTE, RT3 RH1, 0, 100)
//_neio
//ZMK_COMBO(cs-nh, &kp ???, RM2 RH1, 0, 100)
//ZMK_COMBO(cs-ee, &kp CS_E_ACUTE, RM2 RH1, 0, 100)
//ZMK_COMBO(cs-ie, &kp CS_E_CARON, RM2 RH0, 0, 100)
//ZMK_COMBO(cs-ii, &kp CS_I_ACUTE, RM3 RH1, 0, 100)
//ZMK_COMBO(cs-oo, &kp ???, RM2 RH1, 0, 100)



//  MOUSE KEY PRESS
//  left right middle
ZMK_COMBO(mouse-l, &mkp MB1, RN1 RN2, ALL, 50)
ZMK_COMBO(mouse-r, &mkp MB2, RN2 RN3, ALL, 50)
ZMK_COMBO(mouse-m, &mkp MB3, RN1 RN3, ALL, 50)
//  back forward
ZMK_COMBO(mouse-back, &mkp MB4, LN3 LN2, ALL, 50)
ZMK_COMBO(mouse-fwd,  &mkp MB5, LN2 LN1, ALL, 50)
//  context menu (right click?)
ZMK_COMBO(menu, &kp K_CONTEXT_MENU, LM3 LM1, ALL, 50)


// quotation marks
// „ / ‚
ZMK_COMBO(quotation-low-99, &uc_lo99, RT0 RT1, ALL, 50)
// " / '
ZMK_COMBO(quotation-std, &my_quo, RT3 RT4, ALL, 50)

//  ()
ZMK_COMBO(bracket-reg-l, &kp CS_LEFT_PARENTHESIS, RM0 RM1, ALL, 50)
ZMK_COMBO(bracket-reg-r, &kp CS_RIGHT_PARENTHESIS, RM1 RM2, ALL, 50)
//  []
ZMK_COMBO(bracket-sq-l, &kp CS_LEFT_BRACKET, RM2 RM3, ALL, 50)
ZMK_COMBO(bracket-sq-r, &kp CS_RIGHT_BRACKET, RM3 RM4, ALL, 50)

//  curly?
ZMK_COMBO(bracket-curly-l, &kp CS_LBRC, RB0 RM1, ALL, 50)
ZMK_COMBO(bracket-curly-r, &kp CS_RBRC, RB1 RM2, ALL, 50)


