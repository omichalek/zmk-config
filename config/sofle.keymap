/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

// I am using localized keymap,
// comes from github.com/joelspadin/zmk-locale-generator v1.3.2
#include "keys_cs.h"

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
// #include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

// All the ZMK_* commands below utilize zmk-nodefree-config:
#define HOST_OS 1  // set to 1 for Linux, default is 0 (Windows)
#include "../zmk-nodefree-config/helper.h"
// positional key names for Sofle:
#include "../zmk-nodefree-config/keypos_def/keypos_60keys.h"

#define BASE 0
#define NAV 1
#define NUM 2
#define MIR 3
#define SYS 4

// #define ALFA (LH1)


// ///   EC11 Encoders   /// //
&sensors {
  triggers-per-rotation = <30>;
};



// ///   CUSTOM   /// //

/ {
  behaviors {
        hht: hold_tap_hold-pref {
            compatible = "zmk,behavior-hold-tap";
            hold-while-undecided;
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "hold-preferred";    // hh
            bindings = <&kp>, <&kp>;      // HOLD TAP
        };
    
        htt: hold_tap_tap-pref {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";   // tt
            bindings = <&kp>, <&kp>;    // HOLD TAP
        };
  
        //  CUSTOM KEYS

        my_qmem: questionmark_exclamationmark {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp CS_QMARK>, <&kp CS_EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        my_cose: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp CS_COMMA>, <&kp CS_SEMICOLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        my_doco: dot_comma {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp CS_PERIOD>, <&kp CS_COMMA>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        my_rm: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        my_quo: quotation-double-single {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp CS_DOUBLE_QUOTES>, <&kp CS_SINGLE_QUOTE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

    
        //  CUSTOM F-KEYS
        
        my_f1: tap_dance_f1 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <155>;
            bindings = <&hht F1 ESC>, <&kp LC(F1)>;
        };
    
  };
};

// //   CUSTOM: UNICODE    normal            shifted
// quotation marks
// „ / ‚
ZMK_UNICODE_PAIR(uc_lo99,   N2, N0, N1, E,    N2, N0, N1, A)
// “ / ‘
ZMK_UNICODE_PAIR(uc_hi66,   N2, N0, N1, C,    N2, N0, N1, N8)
// ” / ’
ZMK_UNICODE_PAIR(uc_hi99,   N2, N0, N1, D,    N2, N0, N1, N9)



// ///   LAYERS   /// //

// Activate ADJUST layer by pressing
ZMK_CONDITIONAL_LAYER(1 2, 4)



ZMK_LAYER(base,

&htt F1 ESC &kp F2    &kp F3  &kp F4  &kp F5    &kp F6                         &kp PSCRN &kp HOME  &kp C_PP   &kp END   &kp F11       &kp C_AL_CALC
&kp TAB    &kp Q     &kp W   &kp F   &kp P     &kp G                          &kp J     &kp L     &kp U      &kp CS_Y  &kp CS_MINUS  &my_rm
&kp LSHFT  &kp A     &kp R   &kp S   &kp T     &kp D                          &kp H     &kp N     &kp E      &kp I     &kp O         &kp LCTRL
&lt 3 SPACE  &kp CS_Z  &kp X   &kp C   &kp V     &kp B  &kp C_MUTE  &kp C_MUTE  &my_qmem  &kp M     &kp K      &my_cose  &kp CS_DOT  &lt 3 RET
         &kp LGUI  &kp LALT &mo NUM  &mo NAV  &hht LCTRL RET   &hht RSHFT SPACE &mo NUM   &mo NAV   &kp RALT   &kp LGUI,

&inc_dec_kp RIGHT LEFT &inc_dec_kp C_VOL_UP C_VOL_DN
)



ZMK_LAYER(nav-num,

&kp F7    &kp F8    &kp F9    &kp F10   &kp F11   &kp F12                       &kp F7          &kp F8     &kp F9     &kp F10    &kp F11       &kp F12
&trans    &kp ESC   &kp BSPC  &kp UP    &kp DEL   &kp PG_UP                     &kp KP_MULTIPLY &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS  &trans
&trans    &kp HOME  &kp LEFT  &kp DOWN  &kp RIGHT &kp END                       &kp KP_DIVIDE   &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS  &trans
&trans    &kp NUBS  &kp TAB   &kp SPACE &kp ENTER &kp PG_DN    &trans   &trans  &kp KP_N0       &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp CS_EQUAL  &trans
                    &trans    &trans    &trans    &trans     &trans   &trans  &trans            &kp KP_N0   &trans    &trans, 

&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN
)



ZMK_LAYER(num-nav,

&kp GRAVE  &kp N1          &kp N2     &kp N3     &kp N4     &kp N5                             &kp N6     &kp N7    &kp N8    &kp N9    &kp N0     &kp CS_ACUTE
&trans     &kp KP_MULTIPLY &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS                       &kp ESC    &kp BSPC  &kp UP    &kp DEL   &kp PG_UP  &trans
&trans     &kp KP_DIVIDE   &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp CS_PLUS                        &kp HOME   &kp LEFT  &kp DOWN  &kp RIGHT &kp END    &trans
&trans     &kp KP_N0       &kp KP_N1  &kp KP_N2  &kp KP_N3  &my_doco    &kp C_BKLT_TOG &trans  &kp NUBS   &kp ENTER &kp SPACE &kp TAB   &kp PG_DN  &trans
                           &trans     &trans     &trans     &trans       &trans         &trans  &trans    &trans    &trans    &trans,

&inc_dec_kp C_BRIGHTNESS_INC C_BRIGHTNESS_DEC &inc_dec_kp PG_UP PG_DN
)



ZMK_LAYER(mirror,

&trans  &trans    &trans   &trans   &trans    &trans                       &trans    &trans  &trans   &trans   &trans   &trans
&trans  &kp J     &kp L    &kp U    &kp CS_Y  &kp CS_MINUS                 &kp Q     &kp W   &kp F    &kp P    &kp G    &trans
&trans  &kp H     &kp N    &kp E    &kp I     &kp O                        &kp A     &kp R   &kp S    &kp T    &kp D    &trans
&trans  &my_qmem  &kp M    &kp K    &my_cose  &kp CS_DOT  &trans  &trans   &kp CS_Z  &kp X   &kp C    &kp V    &kp B    &trans
                  &trans   &trans   &trans    &trans      &trans  &trans   &trans    &trans  &trans   &trans,

&inc_dec_kp DOWN UP &inc_dec_kp C_VOL_UP C_VOL_DN
)



ZMK_LAYER(sys,

&bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_CLR                  &trans    &trans    &trans   &trans    &trans  &trans
&trans     &kp INS      &kp PSCRN    &kp K_CMENU  &trans       &trans                        &kp PG_UP &trans    &kp UP   &trans    &kp N0  &trans
&trans     &kp LALT     &kp LCTRL    &kp LSHFT    &trans       &kp CLCK                      &kp PG_DN &kp LEFT  &kp DOWN &kp RIGHT &kp DEL &kp BSPC
&trans     &kp K_UNDO   &kp K_CUT    &kp K_COPY   &kp K_PASTE  &trans        &trans  &trans  &trans    &trans    &trans   &trans    &trans  &trans
                        &trans       &trans       &trans       &trans        &trans  &trans  &trans    &trans    &trans   &trans,

&inc_dec_kp &trans &trans &inc_dec_kp &trans &trans
)



// ///   CUSTOM COMBOS   /// //


// DIACRITICS, LEFT
ZMK_COMBO(cs-aa, &kp CS_A_ACUTE, LM4 LH1, 0, 100)
ZMK_COMBO(cs-rh, &kp CS_R_CARON, LM3 LH1, 0, 100)
ZMK_COMBO(cs-sh, &kp CS_S_CARON, LM2 LH1, 0, 100)
//ZMK_COMBO(cs-tt, &kp ???, LM1 LH1, 0 3, 100)
//ZMK_COMBO(cs-dd, &kp ???, LM0 LH1, 0 3, 100)
 
ZMK_COMBO(cs-zh, &kp CS_Z_CARON, LB4 LH1, 0, 100)
ZMK_COMBO(cs-ch, &kp CS_C_CARON, LB2 LH1, 0, 100)

// DIACRITICS, RIGHT
ZMK_COMBO(cs-uu, &kp CS_U_ACUTE, RT2 RH1, 0, 100)
ZMK_COMBO(cs-uo, &kp CS_U_RING , RT2 RH0, 0, 100)
ZMK_COMBO(cs-yy, &kp CS_Y_ACUTE, RT3 RH1, 0, 100)
//_neio
//ZMK_COMBO(cs-nh, &kp ???, RM2 RH1, 0, 100)
ZMK_COMBO(cs-ee, &kp CS_E_ACUTE, RM2 RH1, 0, 100)
ZMK_COMBO(cs-ie, &kp CS_E_CARON, RM2 RH0, 0, 100)
ZMK_COMBO(cs-ii, &kp CS_I_ACUTE, RM3 RH1, 0, 100)
//ZMK_COMBO(cs-oo, &kp ???, RM2 RH1, 0, 100)



//  MOUSE KEY PRESS
//  left right middle
ZMK_COMBO(mouse-l, &mkp MB1, RN1 RN2, ALL, 50)
ZMK_COMBO(mouse-r, &mkp MB2, RN2 RN3, ALL, 50)
ZMK_COMBO(mouse-m, &mkp MB3, RN1 RN3, ALL, 50)
//  back forward
ZMK_COMBO(mouse-back, &mkp MB4, LN3 LN2, ALL, 50)
ZMK_COMBO(mouse-fwd,  &mkp MB5, LN2 LN1, ALL, 50)
//  context menu (right click?)
ZMK_COMBO(menu, &kp K_CONTEXT_MENU, LM3 LM1, ALL, 50)


// quotation marks
// „ / ‚
ZMK_COMBO(quotation-low-99, &uc_lo99, RT0 RT1, ALL, 50)
// " / '
ZMK_COMBO(quotation-std, &my_quo, RT3 RT4, ALL, 50)

//  ()
ZMK_COMBO(bracket-reg-l, &kp CS_LEFT_PARENTHESIS, RM0 RM1, ALL, 50)
ZMK_COMBO(bracket-reg-r, &kp CS_RIGHT_PARENTHESIS, RM1 RM2, ALL, 50)
//  []
ZMK_COMBO(bracket-sq-l, &kp CS_LEFT_BRACKET, RM2 RM3, ALL, 50)
ZMK_COMBO(bracket-sq-r, &kp CS_RIGHT_BRACKET, RM3 RM4, ALL, 50)

//  curly?
ZMK_COMBO(bracket-curly-l, &kp CS_LBRC, RB0 RM1, ALL, 50)
ZMK_COMBO(bracket-curly-r, &kp CS_RBRC, RB1 RM2, ALL, 50)


