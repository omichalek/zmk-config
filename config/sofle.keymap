/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

// I am using localized keymap,
// comes from github.com/joelspadin/zmk-locale-generator v1.3.2
#include "keys_cs.h"

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
// #include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

// All the ZMK_* commands below utilize zmk-nodefree-config:
#include "../zmk-nodefree-config/helper.h"
// positional key names for Sofle:
#include "../zmk-nodefree-config/keypos_def/keypos_60keys.h"

#define BASE 0
#define NAV 1
#define NUM 2
#define ADJUST 3


// ///   EC11 Encoders   /// //
&sensors {
  triggers-per-rotation = <30>;
};



// ///   CUSTOM KEYS   /// //

/ {
    behaviors {
        my_qmem: questionmark_exclamationmark {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp CS_QMARK>, <&kp CS_EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};



// ///   LAYERS   /// //

// Activate ADJUST layer by pressing raise and lower
ZMK_CONDITIONAL_LAYER(1 2, 3)

//    conditional_layers {
//        compatible = "zmk,conditional-layers";
//        adjust_layer {
//            if-layers = <NAV NUM>;
//            then-layer = <ADJUST>;
//        };
//    };


ZMK_LAYER(base,

&kp ESC   &kp F2    &kp F3  &kp F4   &kp F5    &kp F6                         &kp PSCRN &kp HOME  &kp C_PP   &kp END     &kp F11     &kp DEL
&kp TAB   &kp Q     &kp W   &kp F    &kp P     &kp G                          &kp J     &kp L     &kp U      &kp CS_Y    &kp CS_MINUS  &kp BSPC
&kp LSHFT &kp A     &kp R   &kp S    &kp T     &kp D                          &kp H     &kp N     &kp E      &kp I       &kp O       &kp RCTRL
&kp SPACE &kp CS_Z  &kp X   &kp C    &kp V     &kp B  &kp C_MUTE  &kp C_MUTE  &my_qmem  &kp M     &kp K     &kp CS_COMMA &kp CS_DOT  &kp RET
                 &kp LGUI   &kp LALT  &mo NUM  &mo NAV  &kp LCTRL  &kp RSHFT  &mo NUM   &mo NAV      &kp RALT   &kp RGUI,

&inc_dec_kp DOWN UP &inc_dec_kp C_VOL_UP C_VOL_DN
)



ZMK_LAYER(nav-num,

&kp F7    &kp F8    &kp F9    &kp F10   &kp F11   &kp F12                     &kp F7          &kp F8     &kp F9     &kp F10     &kp F11     &kp F12
&trans    &kp ESC   &kp BSPC  &kp UP    &kp DEL   &kp PG_UP                   &kp KP_MULTIPLY &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_PLUS  &kp K_CALC
&trans    &kp HOME  &kp LEFT  &kp DOWN  &kp RIGHT &kp END                   &kp KP_DIVIDE    &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_MINUS  &trans
&trans    &kp HOME  &kp TAB   &kp SPACE &kp ENTER &kp PG_DN    &trans   &trans  &kp KP_N0    &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_EQUAL  &trans
                    &trans    &trans    &trans    &trans     &trans   &trans  &trans         &kp KP_N0    &trans    &trans, 

&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN
)



ZMK_LAYER(num,

&kp GRAVE  &kp N1          &kp N2      &kp N3      &kp N4       &kp N5                        &kp N6    &kp N7    &kp N8   &kp N9    &kp N0  &trans
&trans     &kp KP_MULTIPLY &kp KP_N7   &kp KP_N8   &kp KP_N9    &kp KP_PLUS                   &kp PG_UP &trans    &kp UP   &trans    &kp N0  &trans
&trans     &kp KP_DIVIDE   &kp KP_N4   &kp KP_N5   &kp KP_N6    &kp KP_MINUS                  &kp PG_DN &kp LEFT  &kp DOWN &kp RIGHT &kp DEL &kp BSPC
&trans     &kp KP_N0       &kp KP_N1   &kp KP_N2   &kp KP_N3    &kp KP_EQUAL  &trans  &trans  &trans    &trans    &trans   &trans    &trans  &trans
                           &trans      &trans      &trans       &trans        &trans  &trans  &trans    &trans    &trans   &trans,

&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN
)



ZMK_LAYER(adjust,

&bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_CLR                  &trans    &trans    &trans   &trans    &trans  &trans
&trans     &kp INS      &kp PSCRN    &kp K_CMENU  &trans       &trans                        &kp PG_UP &trans    &kp UP   &trans    &kp N0  &trans
&trans     &kp LALT     &kp LCTRL    &kp LSHFT    &trans       &kp CLCK                      &kp PG_DN &kp LEFT  &kp DOWN &kp RIGHT &kp DEL &kp BSPC
&trans     &kp K_UNDO   &kp K_CUT    &kp K_COPY   &kp K_PASTE  &trans        &trans  &trans  &trans    &trans    &trans   &trans    &trans  &trans
                        &trans       &trans       &trans       &trans        &trans  &trans  &trans    &trans    &trans   &trans,

&inc_dec_kp &trans &trans &inc_dec_kp &trans &trans
)



// ///   CUSTOM COMBOS   /// //


//  MOUSE KEY PRESS
//  left right middle
ZMK_COMBO(mouse-l, &mkp MB1, RN1 RN2, ALL, 50)
ZMK_COMBO(mouse-r, &mkp MB2, RN2 RN3, ALL, 50)
ZMK_COMBO(mouse-m, &mkp MB3, RN1 RN3, ALL, 50)
//  back forward
ZMK_COMBO(mouse-back, &mkp MB4, LN3 LN2, ALL, 50)
ZMK_COMBO(mouse-fwd,  &mkp MB5, LN2 LN1, ALL, 50)


//  () ?
ZMK_COMBO(bracket-reg-l, &kp CS_LEFT_PARENTHESIS, RM0 RM1, ALL, 50)
ZMK_COMBO(bracket-reg-r, &kp CS_RIGHT_PARENTHESIS, RM1 RM2, ALL, 50)

//  []
ZMK_COMBO(bracket-sq-l, &kp CS_LEFT_BRACKET, RM2 RM3, ALL, 50)
ZMK_COMBO(bracket-sq-r, &kp CS_RIGHT_BRACKET, RM3 RM4, ALL, 50)

//  
ZMK_COMBO(bracket-curly-l, &kp CS_LBRC, RB0 RM1, ALL, 50)
ZMK_COMBO(bracket-curly-r, &kp CS_RBRC, RB1 RM2, ALL, 50)

